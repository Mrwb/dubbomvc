<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
	  http://www.springframework.org/schema/aop
	  http://www.springframework.org/schema/aop/spring-aop-4.0.xsd"
	default-autowire="byName">
	
	<!-- 启用注解 -->
	<context:annotation-config/>
	<context:component-scan base-package="com.myswing" />

	<bean id="placeholderConfig"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:config.properties</value>
			</list>
		</property>
	</bean>
	<!-- 使用disconf必须添加以下配置 -->
	<!-- <bean id="disconfMgrBean" class="com.baidu.disconf.client.DisconfMgrBean" 
		destroy-method="destroy"> <property name="scanPackage" value="com.example.disconf.demo"/> 
		</bean> <bean id="disconfMgrBean2" class="com.baidu.disconf.client.DisconfMgrBeanSecond" 
		init-method="init" destroy-method="destroy"> </bean> -->

	<!-- 使用托管方式的disconf配置(无代码侵入, 配置更改会不自动reload) -->
	<!-- <bean id="configproperties_no_reloadable_disconf" class="com.baidu.disconf.client.addons.properties.ReloadablePropertiesFactoryBean"> 
		<property name="locations"> <list> <value>classpath:/config.properties</value> 
		<value>classpath:/log4j.properties</value> <value>classpath:/sso.properties</value> 
		</list> </property> </bean> <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"> 
		<property name="ignoreResourceNotFound" value="true" /> <property name="ignoreUnresolvablePlaceholders" 
		value="true" /> <property name="propertiesArray"> <list> <ref bean="configproperties_no_reloadable_disconf"/> 
		</list> </property> </bean> -->

	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<!-- 基本属性 url、user、password -->
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />

		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="1" />
		<property name="minIdle" value="1" />
		<property name="maxActive" value="20" />

		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />

		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />

		<property name="validationQuery" value="SELECT 'x'" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />

		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<property name="poolPreparedStatements" value="true" />
		<property name="maxPoolPreparedStatementPerConnectionSize"
			value="20" />

		<!-- 配置监控统计拦截的filters，去掉后监控界面sql无法统计 -->
		<property name="filters" value="stat" />
		<!-- 慢sql颜色高亮 -->
		<property name="connectionProperties" value="druid.stat.slowSqlMillis=2000" />
	</bean>

	<!-- <bean id="stat-filter" class="com.alibaba.druid.filter.stat.StatFilter"> 
		<property name="slowSqlMillis" value="3" /> <property name="logSlowSql" value="true" 
		/> </bean> -->

	<!--根据dataSource创建一个SqlSessionFactory -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="mapperLocations" value="classpath:sqlMap/*.xml"></property>
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!--根据sqlSessionFactory创建一个sqlSession模版类 -->
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0">
			<ref bean="sqlSessionFactory" />
		</constructor-arg>
	</bean>
	<bean id="dao" class="com.myswing.dao.MybatisDaoImpl">
		<constructor-arg index="0">
			<ref bean="sqlSessionFactory" />
		</constructor-arg>
	</bean>

	<!--事务管理DataSourceTransactionManager -->
	<bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- 事务控制 -->
	<aop:config>
		<aop:pointcut id="baseServiceMethods"
			expression="execution(* com.myswing.service.*.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="baseServiceMethods" />
	</aop:config>
	<!-- 事务控制 -->

	<!--启动spring注解功能 -->
	<tx:annotation-driven transaction-manager="txManager" />

	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="save*" propagation="REQUIRED" isolation="REPEATABLE_READ" />
			<tx:method name="update*" propagation="REQUIRED" isolation="REPEATABLE_READ" />
			<tx:method name="add*" propagation="REQUIRED" isolation="REPEATABLE_READ" />
			<tx:method name="delete*" propagation="REQUIRED" isolation="REPEATABLE_READ" />
		</tx:attributes>
	</tx:advice>
	
</beans>